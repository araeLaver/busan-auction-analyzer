const express = require('express');
const http = require('http');
const path = require('path');
const cors = require('cors');
const compression = require('compression');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');

// ÏÑúÎπÑÏä§ ÌÅ¥ÎûòÏä§Îì§
const SocketService = require('./services/SocketService');
const NotificationService = require('./services/NotificationService');
const CacheService = require('./services/CacheService');
const AnalysisService = require('./services/AnalysisService');
const AdvancedCourtAuctionScraper = require('./scraper/AdvancedCourtAuctionScraper');
const AIInvestmentAnalyzer = require('./analyzer/AIInvestmentAnalyzer');

// Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§
const pool = require('../config/database');

/**
 * Í≥†ÏÑ±Îä• Î∂ÄÏÇ∞Í≤ΩÎß§ AI Î∂ÑÏÑù ÏãúÏä§ÌÖú
 * 
 * Ï£ºÏöî ÌäπÏßï:
 * - Ïã§ÏãúÍ∞Ñ Socket.IO Ïó∞Îèô
 * - Îã§Îã®Í≥Ñ Ï∫êÏã± ÏãúÏä§ÌÖú
 * - AI Í∏∞Î∞ò Ìà¨Ïûê Î∂ÑÏÑù
 * - Í≥†Í∏â Ïä§ÌÅ¨ÎûòÌïë ÏóîÏßÑ
 * - ÏÑ±Îä• ÏµúÏ†ÅÌôî Î∞è Î™®ÎãàÌÑ∞ÎßÅ
 */
class OptimizedBusanAuctionApp {
  constructor() {
    this.app = express();
    this.server = null;
    
    // ÏÑúÎπÑÏä§ Ïù∏Ïä§ÌÑ¥Ïä§Îì§
    this.socketService = new SocketService();
    this.cacheService = new CacheService();
    this.notificationService = new NotificationService();
    this.analysisService = new AnalysisService();
    this.scraper = new AdvancedCourtAuctionScraper();
    this.analyzer = new AIInvestmentAnalyzer();
    
    // Ïï± ÏÉÅÌÉú
    this.isRunning = false;
    this.startTime = Date.now();
    
    // ÏÑ±Îä• Î©îÌä∏Î¶≠
    this.metrics = {
      requests: 0,
      errors: 0,
      responseTime: [],
      memoryUsage: [],
      cpuUsage: []
    };
  }

  /**
   * Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ï¥àÍ∏∞Ìôî
   */
  async initialize() {
    try {
      console.log('üöÄ Î∂ÄÏÇ∞Í≤ΩÎß§ AI Î∂ÑÏÑù ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî Ï§ë...');
      
      // Express Ïï± ÏÑ§Ï†ï
      await this.setupExpress();
      
      // HTTP ÏÑúÎ≤Ñ ÏÉùÏÑ±
      this.server = http.createServer(this.app);
      
      // Socket.IO Ï¥àÍ∏∞Ìôî
      const io = this.socketService.initialize(this.server);
      this.notificationService.setSocketIO(io);
      
      // API ÎùºÏö∞Ìä∏ ÏÑ§Ï†ï
      await this.setupRoutes();
      
      // ÏóêÎü¨ Ìï∏Îì§ÎßÅ
      this.setupErrorHandling();
      
      // ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ
      this.setupPerformanceMonitoring();
      
      // Ï∫êÏãú ÏõåÎ∞ç (DB Ïó∞Í≤∞ Ïã§Ìå® Ïãú Ïä§ÌÇµ)
      try {
        await this.cacheService.warmupCache();
      } catch (error) {
        console.log('‚ö†Ô∏è Ï∫êÏãú ÏõåÎ∞ç Ïä§ÌÇµ (DB Ïó∞Í≤∞ ÏóÜÏùå):', error.message);
      }
      
      console.log('‚úÖ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
      
    } catch (error) {
      console.error('‚ùå Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
      throw error;
    }
  }

  /**
   * Express Ïï± ÏÑ§Ï†ï
   */
  async setupExpress() {
    // Î≥¥Ïïà ÎØ∏Îì§Ïõ®Ïñ¥
    this.app.use(helmet({
      contentSecurityPolicy: {
        directives: {
          defaultSrc: ["'self'"],
          scriptSrc: ["'self'", "'unsafe-inline'", "https://cdn.tailwindcss.com", "https://cdn.jsdelivr.net"],
          styleSrc: ["'self'", "'unsafe-inline'", "https://cdnjs.cloudflare.com", "https://cdn.tailwindcss.com"],
          fontSrc: ["'self'", "https://cdnjs.cloudflare.com"],
          imgSrc: ["'self'", "data:", "https:"],
          connectSrc: ["'self'", "ws:", "wss:"],
          scriptSrcAttr: ["'unsafe-inline'"]  // Ïù∏ÎùºÏù∏ Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨ ÌóàÏö©
        }
      }
    }));

    // GZIP ÏïïÏ∂ï
    this.app.use(compression({
      filter: (req, res) => {
        if (req.headers['x-no-compression']) {
          return false;
        }
        return compression.filter(req, res);
      },
      threshold: 1024,
      level: 6
    }));

    // CORS ÏÑ§Ï†ï
    this.app.use(cors({
      origin: process.env.NODE_ENV === 'production' 
        ? process.env.FRONTEND_URL 
        : ['http://localhost:3002', 'http://127.0.0.1:3002'],
      credentials: true,
      methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
      allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
    }));

    // Rate Limiting
    const limiter = rateLimit({
      windowMs: 15 * 60 * 1000, // 15Î∂Ñ
      max: 1000, // ÏµúÎåÄ 1000 ÏöîÏ≤≠
      message: {
        error: 'ÎÑàÎ¨¥ ÎßéÏùÄ ÏöîÏ≤≠ÏûÖÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.',
        retryAfter: '15Î∂Ñ'
      },
      standardHeaders: true,
      legacyHeaders: false,
      skip: (req) => {
        // Socket.IO Ïó∞Í≤∞ÏùÄ Ï†úÏô∏
        return req.path.startsWith('/socket.io/');
      }
    });

    this.app.use('/api', limiter);

    // Body parsing
    this.app.use(express.json({ limit: '10mb' }));
    this.app.use(express.urlencoded({ extended: true, limit: '10mb' }));

    // ÏöîÏ≤≠ Î°úÍπÖ Î∞è Î©îÌä∏Î¶≠
    this.app.use((req, res, next) => {
      const startTime = Date.now();
      
      this.metrics.requests++;
      
      // ÏùëÎãµ ÏôÑÎ£å Ïãú ÏÑ±Îä• Î©îÌä∏Î¶≠ Í∏∞Î°ù
      res.on('finish', () => {
        const duration = Date.now() - startTime;
        this.metrics.responseTime.push(duration);
        
        // ÏùëÎãµ ÏãúÍ∞Ñ Î∞∞Ïó¥Ïù¥ ÎÑàÎ¨¥ Ïª§ÏßÄÏßÄ ÏïäÎèÑÎ°ù Ï†úÌïú
        if (this.metrics.responseTime.length > 1000) {
          this.metrics.responseTime.shift();
        }
        
        // ÎäêÎ¶∞ ÏùëÎãµ Î°úÍπÖ
        if (duration > 1000) {
          console.warn(`‚ö†Ô∏è ÎäêÎ¶∞ ÏùëÎãµ: ${req.method} ${req.path} - ${duration}ms`);
        }
      });
      
      next();
    });

    // Ï†ïÏ†Å ÌååÏùº ÏÑúÎπô (Ï∫êÏã± ÏµúÏ†ÅÌôî)
    this.app.use(express.static(path.join(__dirname, '../public'), {
      maxAge: process.env.NODE_ENV === 'production' ? '1d' : '0',
      etag: true,
      lastModified: true,
      setHeaders: (res, path) => {
        // JS, CSS ÌååÏùºÏùÄ Îçî Í∏¥ Ï∫êÏãú
        if (path.endsWith('.js') || path.endsWith('.css')) {
          res.setHeader('Cache-Control', 'public, max-age=86400'); // 1Ïùº
        }
        // Ïù¥ÎØ∏ÏßÄ ÌååÏùºÎì§
        if (path.match(/\.(jpg|jpeg|png|gif|ico|svg)$/)) {
          res.setHeader('Cache-Control', 'public, max-age=604800'); // 1Ï£º
        }
      }
    }));
  }

  /**
   * API ÎùºÏö∞Ìä∏ ÏÑ§Ï†ï
   */
  async setupRoutes() {
    // Ìó¨Ïä§ Ï≤¥ÌÅ¨
    this.app.get('/health', (req, res) => {
      const health = {
        status: 'healthy',
        timestamp: new Date().toISOString(),
        uptime: Math.floor((Date.now() - this.startTime) / 1000),
        version: process.env.npm_package_version || '1.0.0',
        services: {
          database: 'connected',
          cache: 'active',
          socketIO: this.socketService.getConnectedUsersCount(),
          scraper: 'ready'
        },
        metrics: {
          totalRequests: this.metrics.requests,
          totalErrors: this.metrics.errors,
          avgResponseTime: this.getAverageResponseTime(),
          memoryUsage: process.memoryUsage(),
          cpuUsage: process.cpuUsage()
        }
      };
      
      res.json(health);
    });

    // API ÎùºÏö∞Ìä∏Îì§
    this.setupApiRoutes();
    
    // Î©îÏù∏ ÌéòÏù¥ÏßÄ
    this.app.get('/', (req, res) => {
      res.sendFile(path.join(__dirname, '../public/index.html'));
    });

    // SPAÎ•º ÏúÑÌïú catch-all ÎùºÏö∞Ìä∏
    this.app.get('*', (req, res) => {
      // API Í≤ΩÎ°úÍ∞Ä ÏïÑÎãå Í≤ΩÏö∞ÏóêÎßå Î©îÏù∏ ÌéòÏù¥ÏßÄ Î∞òÌôò
      if (!req.path.startsWith('/api')) {
        res.sendFile(path.join(__dirname, '../public/index.html'));
      } else {
        res.status(404).json({ error: 'API endpoint not found' });
      }
    });
  }

  /**
   * API ÏóîÎìúÌè¨Ïù∏Ìä∏ ÏÑ§Ï†ï
   */
  setupApiRoutes() {
    const router = express.Router();

    // === ÎåÄÏãúÎ≥¥Îìú API ===
    router.get('/dashboard/stats', async (req, res) => {
      // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÎåÄÏã† Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞Î•º Î∞îÎ°ú Î∞òÌôò
      const mockStats = {
          totalActiveProperties: 156,
          newTodayCount: 12,
          averageInvestmentScore: 78.5,
          highScoreCount: 45,
          totalProperties: 156,
          todayProperties: 12,
          averageScore: 78.5,
          highValueProperties: 45,
          recommendedProperties: 23,
          riskProperties: 8,
          regionStats: [
            { region: 'Ìï¥Ïö¥ÎåÄÍµ¨', count: 45, avgScore: 82 },
            { region: 'ÏàòÏòÅÍµ¨', count: 38, avgScore: 79 },
            { region: 'ÎÇ®Íµ¨', count: 29, avgScore: 75 },
            { region: 'Î∂ÄÏÇ∞ÏßÑÍµ¨', count: 24, avgScore: 73 },
            { region: 'ÎèôÎûòÍµ¨', count: 20, avgScore: 77 }
          ],
          typeStats: [
            { type: 'ÏïÑÌååÌä∏', count: 89, avgScore: 80 },
            { type: 'Îã®ÎèÖÏ£ºÌÉù', count: 34, avgScore: 72 },
            { type: 'ÏÉÅÍ∞Ä', count: 23, avgScore: 85 },
            { type: 'ÌÜ†ÏßÄ', count: 10, avgScore: 68 }
          ],
          priceRanges: [
            { range: '1Ïñµ ÎØ∏Îßå', count: 23 },
            { range: '1-3Ïñµ', count: 56 },
            { range: '3-5Ïñµ', count: 42 },
            { range: '5-10Ïñµ', count: 28 },
            { range: '10Ïñµ Ïù¥ÏÉÅ', count: 7 }
          ],
          recentTrends: {
            week: [65, 72, 68, 74, 71, 76, 78],
            labels: ['Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†', 'Ïùº']
          }
        };
      res.json(mockStats);
    });

    // === Î¨ºÍ±¥ Î™©Î°ù API ===
    router.get('/properties', async (req, res) => {
      try {
        const {
          page = 1,
          limit = 10,
          sort = 'investment_score',
          order = 'DESC',
          type,
          region,
          minPrice,
          maxPrice,
          minScore,
          grade,
          failureCount,
          roi,
          tenant
        } = req.query;

        const filters = {
          propertyType: type,
          region,
          minPrice: minPrice ? parseInt(minPrice) : undefined,
          maxPrice: maxPrice ? parseInt(maxPrice) : undefined,
          minScore: minScore ? parseInt(minScore) : undefined
        };

        // CacheServiceÎ•º ÌÜµÌï¥ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
        const result = await this.cacheService.getPropertiesList(
          filters, 
          parseInt(page), 
          parseInt(limit), 
          sort, 
          order
        );

        // ÌîÑÎ°†Ìä∏ÏóîÎìúÍ∞Ä Í∏∞ÎåÄÌïòÎäî Íµ¨Ï°∞Î°ú Î≥ÄÌôò
        const formattedResponse = {
          data: result.properties || [],
          pagination: {
            page: result.page || 1,
            limit: result.limit || 10,
            total: result.total || 0,
            totalPages: result.totalPages || 0,
            hasNext: result.hasNext || false,
            hasPrev: result.hasPrev || false
          }
        };
        
        res.json(formattedResponse);

      } catch (error) {
        console.error('‚ùå Î¨ºÍ±¥ Î™©Î°ù Ï°∞Ìöå Ïã§Ìå®:', error);
        res.status(500).json({ 
          error: 'Î¨ºÍ±¥ Î™©Î°ù Ï°∞Ìöå Ïã§Ìå®',
          data: [],
          pagination: {
            page: 1,
            limit: 10,
            total: 0,
            totalPages: 0,
            hasNext: false,
            hasPrev: false
          }
        });
      }
    });

    // === Î¨ºÍ±¥ ÏÉÅÏÑ∏ API ===
    router.get('/properties/:id', async (req, res) => {
      try {
        const propertyId = parseInt(req.params.id);
        
        if (isNaN(propertyId)) {
          return res.status(400).json({ error: 'Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏùÄ Î¨ºÍ±¥ ID' });
        }

        const property = await this.cacheService.getPropertyDetail(propertyId);
        
        if (!property) {
          return res.status(404).json({ error: 'Î¨ºÍ±¥ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§' });
        }

        res.json(property);

      } catch (error) {
        console.error('‚ùå Î¨ºÍ±¥ ÏÉÅÏÑ∏ Ï°∞Ìöå Ïã§Ìå®:', error);
        res.status(500).json({ error: 'Î¨ºÍ±¥ ÏÉÅÏÑ∏ Ï°∞Ìöå Ïã§Ìå®' });
      }
    });

    // === Ïã§ÏãúÍ∞Ñ Î∂ÑÏÑù API ===
    router.post('/properties/:id/analyze', async (req, res) => {
      try {
        const propertyId = parseInt(req.params.id);
        
        if (isNaN(propertyId)) {
          return res.status(400).json({ error: 'Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏùÄ Î¨ºÍ±¥ ID' });
        }

        // ÎπÑÎèôÍ∏∞Î°ú Î∂ÑÏÑù ÏãúÏûë
        this.analyzer.analyzeProperty(propertyId)
          .then((result) => {
            // Socket.IOÎ°ú Í≤∞Í≥º Ï†ÑÏÜ°
            this.socketService.io?.emit('analysis-complete', {
              propertyId,
              result
            });
            
            // Ï∫êÏãú Î¨¥Ìö®Ìôî
            this.cacheService.invalidatePropertyCache(propertyId);
          })
          .catch((error) => {
            console.error(`‚ùå Î¨ºÍ±¥ ${propertyId} Î∂ÑÏÑù Ïã§Ìå®:`, error);
            this.socketService.io?.emit('analysis-failed', {
              propertyId,
              error: error.message
            });
          });

        res.json({ 
          message: 'Î∂ÑÏÑùÏù¥ ÏãúÏûëÎêòÏóàÏäµÎãàÎã§',
          propertyId,
          estimatedTime: '2-3Î∂Ñ'
        });

      } catch (error) {
        console.error('‚ùå Î∂ÑÏÑù ÏöîÏ≤≠ Ï≤òÎ¶¨ Ïã§Ìå®:', error);
        res.status(500).json({ error: 'Î∂ÑÏÑù ÏöîÏ≤≠ Ï≤òÎ¶¨ Ïã§Ìå®' });
      }
    });

    // === ÏãúÏû• Ìä∏Î†åÎìú API ===
    router.get('/market/trends', async (req, res) => {
      try {
        const { region, propertyType = 'ÏïÑÌååÌä∏', period = '3M' } = req.query;
        
        if (!region) {
          return res.status(400).json({ error: 'ÏßÄÏó≠ ÌååÎùºÎØ∏ÌÑ∞Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§' });
        }

        const trend = await this.cacheService.getMarketTrend(region, propertyType, period);
        res.json(trend);

      } catch (error) {
        console.error('‚ùå ÏãúÏû• Ìä∏Î†åÎìú Ï°∞Ìöå Ïã§Ìå®:', error);
        res.status(500).json({ error: 'ÏãúÏû• Ìä∏Î†åÎìú Ï°∞Ìöå Ïã§Ìå®' });
      }
    });

    // === Í¥ÄÏã¨Î™©Î°ù API ===
    router.post('/watchlist/:propertyId', async (req, res) => {
      try {
        const propertyId = parseInt(req.params.propertyId);
        const { userId } = req.body; // Ïã§Ï†úÎ°úÎäî JWTÏóêÏÑú Ï∂îÏ∂ú

        // TODO: Í¥ÄÏã¨Î™©Î°ù Ï∂îÍ∞Ä Î°úÏßÅ Íµ¨ÌòÑ
        
        res.json({ 
          message: 'Í¥ÄÏã¨Î™©Î°ùÏóê Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§',
          propertyId 
        });

      } catch (error) {
        console.error('‚ùå Í¥ÄÏã¨Î™©Î°ù Ï∂îÍ∞Ä Ïã§Ìå®:', error);
        res.status(500).json({ error: 'Í¥ÄÏã¨Î™©Î°ù Ï∂îÍ∞Ä Ïã§Ìå®' });
      }
    });

    // === Ïä§ÌÅ¨ÎûòÌïë API (Í¥ÄÎ¶¨ÏûêÏö©) ===
    router.post('/admin/scrape', async (req, res) => {
      try {
        // TODO: Í¥ÄÎ¶¨Ïûê Í∂åÌïú ÌôïÏù∏

        // ÎπÑÎèôÍ∏∞Î°ú Ïä§ÌÅ¨ÎûòÌïë ÏãúÏûë
        this.scraper.scrapeBusanAuctions()
          .then((result) => {
            console.log('‚úÖ Ïä§ÌÅ¨ÎûòÌïë ÏôÑÎ£å:', result);
            
            // Ï∫êÏãú Î¨¥Ìö®Ìôî
            this.cacheService.clearAllCache();
            
            // Socket.IOÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ ÏïåÎ¶º
            this.socketService.io?.emit('scraping-complete', result);
          })
          .catch((error) => {
            console.error('‚ùå Ïä§ÌÅ¨ÎûòÌïë Ïã§Ìå®:', error);
          });

        res.json({ 
          message: 'Ïä§ÌÅ¨ÎûòÌïëÏù¥ ÏãúÏûëÎêòÏóàÏäµÎãàÎã§',
          estimatedTime: '5-10Î∂Ñ'
        });

      } catch (error) {
        console.error('‚ùå Ïä§ÌÅ¨ÎûòÌïë ÏãúÏûë Ïã§Ìå®:', error);
        res.status(500).json({ error: 'Ïä§ÌÅ¨ÎûòÌïë ÏãúÏûë Ïã§Ìå®' });
      }
    });

    // === Ï∫êÏãú Í¥ÄÎ¶¨ API (Í¥ÄÎ¶¨ÏûêÏö©) ===
    router.get('/admin/cache/stats', (req, res) => {
      try {
        const stats = this.cacheService.getCacheStats();
        res.json(stats);
      } catch (error) {
        res.status(500).json({ error: 'Ï∫êÏãú ÌÜµÍ≥Ñ Ï°∞Ìöå Ïã§Ìå®' });
      }
    });

    router.delete('/admin/cache', (req, res) => {
      try {
        this.cacheService.clearAllCache();
        res.json({ message: 'Ï∫êÏãúÍ∞Ä Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§' });
      } catch (error) {
        res.status(500).json({ error: 'Ï∫êÏãú Ï¥àÍ∏∞Ìôî Ïã§Ìå®' });
      }
    });

    // === ÏãúÏä§ÌÖú ÏÉÅÌÉú API ===
    router.get('/system/status', (req, res) => {
      const status = {
        app: {
          uptime: Math.floor((Date.now() - this.startTime) / 1000),
          version: process.env.npm_package_version || '1.0.0',
          environment: process.env.NODE_ENV || 'development'
        },
        services: {
          socketIO: this.socketService.getServiceStatus(),
          cache: this.cacheService.getCacheStats(),
          database: 'connected', // TODO: Ïã§Ï†ú DB ÏÉÅÌÉú ÌôïÏù∏
          notifications: 'active'
        },
        metrics: {
          requests: this.metrics.requests,
          errors: this.metrics.errors,
          avgResponseTime: this.getAverageResponseTime(),
          memoryUsage: process.memoryUsage(),
          cpuUsage: process.cpuUsage()
        }
      };
      
      res.json(status);
    });

    this.app.use('/api', router);
  }

  /**
   * ÏóêÎü¨ Ìï∏Îì§ÎßÅ ÏÑ§Ï†ï
   */
  setupErrorHandling() {
    // 404 Ìï∏Îì§Îü¨
    this.app.use((req, res) => {
      res.status(404).json({
        error: 'Not Found',
        message: `Í≤ΩÎ°ú ${req.path}Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§`,
        timestamp: new Date().toISOString()
      });
    });

    // Ï†ÑÏó≠ ÏóêÎü¨ Ìï∏Îì§Îü¨
    this.app.use((err, req, res, next) => {
      this.metrics.errors++;
      
      console.error('‚ùå ÏÑúÎ≤Ñ ÏóêÎü¨:', {
        error: err.message,
        stack: err.stack,
        path: req.path,
        method: req.method,
        timestamp: new Date().toISOString()
      });

      const isDevelopment = process.env.NODE_ENV !== 'production';
      
      res.status(err.status || 500).json({
        error: 'Internal Server Error',
        message: isDevelopment ? err.message : 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§',
        ...(isDevelopment && { stack: err.stack }),
        timestamp: new Date().toISOString()
      });
    });

    // Promise rejection Ìï∏Îì§ÎßÅ
    process.on('unhandledRejection', (reason, promise) => {
      console.error('‚ùå Unhandled Promise Rejection:', reason);
      // Î°úÍ∑∏ Í∏∞Î°ù ÌõÑ Í≥ÑÏÜç Ïã§Ìñâ
    });

    // ÏòàÏô∏ Ï≤òÎ¶¨
    process.on('uncaughtException', (error) => {
      console.error('‚ùå Uncaught Exception:', error);
      
      // ÏïàÏ†ÑÌïú Ï¢ÖÎ£å
      this.gracefulShutdown();
    });
  }

  /**
   * ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ ÏÑ§Ï†ï
   */
  setupPerformanceMonitoring() {
    // 5Î∂ÑÎßàÎã§ ÏÑ±Îä• Î©îÌä∏Î¶≠ Î°úÍπÖ
    setInterval(() => {
      const memoryUsage = process.memoryUsage();
      const cpuUsage = process.cpuUsage();
      
      this.metrics.memoryUsage.push(memoryUsage);
      this.metrics.cpuUsage.push(cpuUsage);
      
      // Î∞∞Ïó¥ ÌÅ¨Í∏∞ Ï†úÌïú
      if (this.metrics.memoryUsage.length > 100) {
        this.metrics.memoryUsage.shift();
      }
      if (this.metrics.cpuUsage.length > 100) {
        this.metrics.cpuUsage.shift();
      }
      
      console.log('üìä ÏÑ±Îä• Î©îÌä∏Î¶≠:', {
        requests: this.metrics.requests,
        avgResponseTime: this.getAverageResponseTime(),
        memoryMB: Math.round(memoryUsage.heapUsed / 1024 / 1024),
        connectedUsers: this.socketService.getConnectedUsersCount()
      });
      
    }, 300000); // 5Î∂Ñ

    // 1ÏãúÍ∞ÑÎßàÎã§ ÏÉÅÏÑ∏ Î¶¨Ìè¨Ìä∏
    setInterval(() => {
      this.generatePerformanceReport();
    }, 3600000); // 1ÏãúÍ∞Ñ
  }

  /**
   * ÏÑúÎ≤Ñ ÏãúÏûë
   */
  async start(port = 3000) {
    try {
      if (this.isRunning) {
        console.log('‚ö†Ô∏è ÏÑúÎ≤ÑÍ∞Ä Ïù¥ÎØ∏ Ïã§Ìñâ Ï§ëÏûÖÎãàÎã§');
        return;
      }

      await this.initialize();

      this.server.listen(port, () => {
        this.isRunning = true;
        console.log(`üöÄ Î∂ÄÏÇ∞Í≤ΩÎß§ AI Î∂ÑÏÑù ÏãúÏä§ÌÖúÏù¥ Ìè¨Ìä∏ ${port}ÏóêÏÑú Ïã§Ìñâ Ï§ëÏûÖÎãàÎã§`);
        console.log(`üåê URL: http://localhost:${port}`);
        console.log(`üìä Í¥ÄÎ¶¨Ïûê: http://localhost:${port}/admin`);
        console.log(`üîó Ïã§ÏãúÍ∞Ñ Ïó∞Í≤∞: ${this.socketService.getConnectedUsersCount()}Í∞ú`);
      });

      // Ï†ïÍ∏∞ ÏûëÏóÖ ÏãúÏûë
      this.startScheduledTasks();

    } catch (error) {
      console.error('‚ùå ÏÑúÎ≤Ñ ÏãúÏûë Ïã§Ìå®:', error);
      throw error;
    }
  }

  /**
   * Ï†ïÍ∏∞ ÏûëÏóÖ ÏãúÏûë
   */
  startScheduledTasks() {
    console.log('‚è∞ Ï†ïÍ∏∞ ÏûëÏóÖ Ïä§ÏºÄÏ§Ñ ÏãúÏûë');

    // 10Î∂ÑÎßàÎã§ ÏïåÎ¶º Ï≤òÎ¶¨
    setInterval(async () => {
      try {
        await this.notificationService.runPeriodicTasks();
      } catch (error) {
        console.error('‚ùå ÏïåÎ¶º Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò:', error);
      }
    }, 600000); // 10Î∂Ñ

    // 1ÏãúÍ∞ÑÎßàÎã§ ÎåÄÏãúÎ≥¥Îìú Ï∫êÏãú Í∞±Ïã†
    setInterval(() => {
      this.cacheService.invalidateDashboardCache();
    }, 3600000); // 1ÏãúÍ∞Ñ
  }

  /**
   * ÏïàÏ†ÑÌïú Ï¢ÖÎ£å
   */
  async gracefulShutdown() {
    console.log('üîÑ ÏïàÏ†ÑÌïú ÏÑúÎ≤Ñ Ï¢ÖÎ£å ÏãúÏûë...');

    this.isRunning = false;

    try {
      // Socket.IO Ïó∞Í≤∞ Ï†ïÎ¶¨
      if (this.socketService.io) {
        this.socketService.io.close();
      }

      // ÏÑúÎ≤Ñ Ï¢ÖÎ£å
      if (this.server) {
        this.server.close();
      }

      // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Ï†ïÎ¶¨
      if (pool) {
        await pool.end();
      }

      console.log('‚úÖ ÏÑúÎ≤Ñ Ï¢ÖÎ£å ÏôÑÎ£å');
      process.exit(0);

    } catch (error) {
      console.error('‚ùå ÏÑúÎ≤Ñ Ï¢ÖÎ£å Ï§ë Ïò§Î•ò:', error);
      process.exit(1);
    }
  }

  // === Ïú†Ìã∏Î¶¨Ìã∞ Î©îÏÑúÎìúÎì§ ===

  getAverageResponseTime() {
    if (this.metrics.responseTime.length === 0) return 0;
    
    const sum = this.metrics.responseTime.reduce((a, b) => a + b, 0);
    return Math.round(sum / this.metrics.responseTime.length);
  }

  generatePerformanceReport() {
    const report = {
      timestamp: new Date().toISOString(),
      uptime: Math.floor((Date.now() - this.startTime) / 1000),
      requests: this.metrics.requests,
      errors: this.metrics.errors,
      errorRate: (this.metrics.errors / this.metrics.requests * 100).toFixed(2) + '%',
      avgResponseTime: this.getAverageResponseTime(),
      connectedUsers: this.socketService.getConnectedUsersCount(),
      cacheStats: this.cacheService.getCacheStats(),
      memoryUsage: process.memoryUsage()
    };

    console.log('üìã ÏÑ±Îä• Î¶¨Ìè¨Ìä∏:', report);
    
    // TODO: Î°úÍ∑∏ ÌååÏùºÏóê Ï†ÄÏû• ÎòêÎäî Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏä§ÌÖúÏóê Ï†ÑÏÜ°
  }
}

module.exports = OptimizedBusanAuctionApp;

// ÏßÅÏ†ë Ïã§Ìñâ Ïãú
if (require.main === module) {
  const app = new OptimizedBusanAuctionApp();
  
  const port = process.env.PORT || 3002;
  
  app.start(port).catch((error) => {
    console.error('‚ùå Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏãúÏûë Ïã§Ìå®:', error);
    process.exit(1);
  });
  
  // Ï¢ÖÎ£å ÏãúÍ∑∏ÎÑê Ï≤òÎ¶¨
  process.on('SIGTERM', () => app.gracefulShutdown());
  process.on('SIGINT', () => app.gracefulShutdown());
}