const puppeteer = require('puppeteer');
const axios = require('axios');
const cheerio = require('cheerio');

/**
 * Ïò®ÎπÑÎìú Í≤ΩÎß§ Îç∞Ïù¥ÌÑ∞ ÏàòÏßëÍ∏∞
 * 
 * Î≤ïÏõêÍ≤ΩÎß§Ï†ïÎ≥¥ ÏÇ¨Ïù¥Ìä∏ ÎåÄÏã† Ïò®ÎπÑÎìúÎ•º ÌôúÏö©ÌïòÏó¨ Ïã§Ï†ú Í≤ΩÎß§ Îç∞Ïù¥ÌÑ∞ ÏàòÏßë
 */
class OnbidScraper {
    constructor() {
        this.browser = null;
        this.page = null;
        this.baseUrl = 'https://www.onbid.co.kr';
        this.data = [];
    }

    /**
     * Ïä§ÌÅ¨ÎûòÌçº Ï¥àÍ∏∞Ìôî
     */
    async initialize() {
        try {
            console.log('üöÄ Ïò®ÎπÑÎìú Í≤ΩÎß§ Îç∞Ïù¥ÌÑ∞ ÏàòÏßëÍ∏∞ Ï¥àÍ∏∞Ìôî Ï§ë...');
            
            this.browser = await puppeteer.launch({
                headless: false,
                args: [
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-gpu',
                    '--start-maximized'
                ]
            });
            
            this.page = await this.browser.newPage();
            
            // Ïã§Ï†ú Î∏åÎùºÏö∞Ï†ÄÏ≤òÎüº ÏÑ§Ï†ï
            await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36');
            await this.page.setViewport({ width: 1920, height: 1080 });
            
            console.log('‚úÖ Ïò®ÎπÑÎìú Ïä§ÌÅ¨ÎûòÌçº Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
            
        } catch (error) {
            console.error('‚ùå Ïò®ÎπÑÎìú Ïä§ÌÅ¨ÎûòÌçº Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
            throw error;
        }
    }

    /**
     * Ï†ÑÍµ≠ Í≤ΩÎß§ Îç∞Ïù¥ÌÑ∞ ÏàòÏßë
     */
    async scrapeAllRegionAuctions(limit = 50) {
        try {
            console.log(`üîç Ïò®ÎπÑÎìú Ï†ÑÍµ≠ Í≤ΩÎß§ Î¨ºÍ±¥ Í≤ÄÏÉâ Ï§ë... (ÏµúÎåÄ ${limit}Í∞ú)`);
            
            // Ïò®ÎπÑÎìú Î∂ÄÎèôÏÇ∞ Í≤ΩÎß§ ÌéòÏù¥ÏßÄ Ï†ëÏÜç
            await this.page.goto(`${this.baseUrl}/op/oi/svc/SvcOiList.do?searchType=1&menuId=10101&subMenuId=`, {
                waitUntil: 'networkidle2',
                timeout: 30000
            });
            
            console.log('üìÑ Ïò®ÎπÑÎìú Î∂ÄÎèôÏÇ∞ Í≤ΩÎß§ ÌéòÏù¥ÏßÄ Ï†ëÏÜç ÏôÑÎ£å');
            
            // ÌéòÏù¥ÏßÄ Î°úÎî© ÎåÄÍ∏∞
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            // Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
            const properties = await this.extractPropertyData(limit);
            
            console.log(`‚úÖ ${properties.length}Í∞ú Í≤ΩÎß§ Î¨ºÍ±¥ ÏàòÏßë ÏôÑÎ£å`);
            return properties;
            
        } catch (error) {
            console.error('‚ùå Ïò®ÎπÑÎìú Í≤ΩÎß§ Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Ïã§Ìå®:', error);
            throw error;
        }
    }

    /**
     * Î¨ºÍ±¥ Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
     */
    async extractPropertyData(limit) {
        const properties = [];
        
        try {
            console.log('üìä Ïò®ÎπÑÎìú Í≤ΩÎß§ Î¨ºÍ±¥ Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú Ï§ë...');
            
            // ÌéòÏù¥ÏßÄ HTML Í∞ÄÏ†∏Ïò§Í∏∞
            const html = await this.page.content();
            const $ = cheerio.load(html);
            
            // Í≤ΩÎß§ Î¨ºÍ±¥ Î™©Î°ù Ï∞æÍ∏∞ (Ïò®ÎπÑÎìú Íµ¨Ï°∞Ïóê ÎßûÍ≤å)
            const items = $('.list_type01 li, .auction-item, .item-list tr').slice(0, limit);
            console.log(`üìã Î∞úÍ≤¨Îêú Í≤ΩÎß§ Î¨ºÍ±¥: ${items.length}Í∞ú`);
            
            items.each((index, item) => {
                if (properties.length >= limit) return false;
                
                try {
                    const $item = $(item);
                    
                    // Ïò®ÎπÑÎìúÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
                    const property = {
                        id: Date.now() + Math.random(),
                        case_number: this.extractCaseNumber($item),
                        court_name: this.extractCourtName($item),
                        property_type: this.extractPropertyType($item),
                        address: this.extractAddress($item),
                        appraisal_value: this.extractAppraisalValue($item),
                        minimum_sale_price: this.extractMinimumPrice($item),
                        auction_date: this.extractAuctionDate($item),
                        current_status: 'active',
                        scraped_at: new Date().toISOString(),
                        source_url: this.baseUrl,
                        is_real_data: true
                    };
                    
                    // Í∏∞Î≥∏ Í≥ÑÏÇ∞Í∞íÎì§
                    if (property.minimum_sale_price > 0 && property.appraisal_value > 0) {
                        property.bid_deposit = Math.floor(property.minimum_sale_price * 0.1);
                        property.discount_rate = Math.round((1 - property.minimum_sale_price / property.appraisal_value) * 100);
                    }
                    
                    // Ïú†Ìö®Ìïú Îç∞Ïù¥ÌÑ∞Îßå Ï∂îÍ∞Ä
                    if (property.address && property.minimum_sale_price > 0) {
                        properties.push(property);
                        console.log(`‚úÖ Î¨ºÍ±¥ Ï∂îÏ∂ú: ${property.case_number || 'N/A'} - ${property.address}`);
                    }
                    
                } catch (error) {
                    console.warn(`‚ö†Ô∏è Ìï≠Î™© ${index} Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò:`, error.message);
                }
            });
            
        } catch (error) {
            console.error('‚ùå Ïò®ÎπÑÎìú Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú Ïã§Ìå®:', error);
        }
        
        return properties;
    }

    // Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú Ìó¨Ìçº Ìï®ÏàòÎì§
    extractCaseNumber($item) {
        const texts = [
            $item.find('.case-number').text(),
            $item.find('.auction-no').text(),
            $item.find('td').eq(0).text(),
            $item.text().match(/\d{4}ÌÉÄÍ≤Ω\d+/)?.[0]
        ];
        
        for (const text of texts) {
            if (text && text.trim()) return text.trim();
        }
        
        return `ONBID-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
    }

    extractCourtName($item) {
        const texts = [
            $item.find('.court').text(),
            $item.find('.court-name').text(),
            $item.find('td').eq(1).text()
        ];
        
        for (const text of texts) {
            if (text && text.includes('Î≤ïÏõê')) return text.trim();
        }
        
        return 'Ïò®ÎπÑÎìú';
    }

    extractPropertyType($item) {
        const texts = [
            $item.find('.type').text(),
            $item.find('.property-type').text(),
            $item.find('td').eq(2).text(),
            $item.text()
        ];
        
        const types = ['ÏïÑÌååÌä∏', 'Îã®ÎèÖÏ£ºÌÉù', 'Îã§ÏÑ∏ÎåÄÏ£ºÌÉù', 'Ïò§ÌîºÏä§ÌÖî', 'ÏÉÅÍ∞Ä', 'ÌÜ†ÏßÄ', 'Í∏∞ÌÉÄ'];
        
        for (const text of texts) {
            for (const type of types) {
                if (text && text.includes(type)) return type;
            }
        }
        
        return 'Í∏∞ÌÉÄ';
    }

    extractAddress($item) {
        const texts = [
            $item.find('.address').text(),
            $item.find('.location').text(),
            $item.find('td').eq(3).text(),
            $item.find('.addr').text()
        ];
        
        for (const text of texts) {
            if (text && text.trim().length > 5) return text.trim();
        }
        
        return 'Ï£ºÏÜå ÎØ∏ÏÉÅ';
    }

    extractAppraisalValue($item) {
        const texts = [
            $item.find('.appraisal').text(),
            $item.find('.evaluation').text(),
            $item.find('td').eq(4).text()
        ];
        
        return this.extractPrice(texts.find(t => t) || '');
    }

    extractMinimumPrice($item) {
        const texts = [
            $item.find('.minimum').text(),
            $item.find('.start-price').text(),
            $item.find('td').eq(5).text()
        ];
        
        return this.extractPrice(texts.find(t => t) || '');
    }

    extractAuctionDate($item) {
        const texts = [
            $item.find('.date').text(),
            $item.find('.auction-date').text(),
            $item.find('td').eq(6).text()
        ];
        
        for (const text of texts) {
            if (text) {
                const dateMatch = text.match(/(\d{4})[.\-\/](\d{1,2})[.\-\/](\d{1,2})/);
                if (dateMatch) {
                    const [, year, month, day] = dateMatch;
                    return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
                }
            }
        }
        
        // Í∏∞Î≥∏Í∞í: 30Ïùº ÌõÑ
        const future = new Date();
        future.setDate(future.getDate() + 30);
        return future.toISOString().split('T')[0];
    }

    extractPrice(text) {
        if (!text) return 0;
        
        const cleanText = text.replace(/[^0-9,ÏñµÎßåÏõê]/g, '');
        const numbers = cleanText.match(/\d+/g);
        
        if (!numbers || numbers.length === 0) return 0;
        
        let price = 0;
        
        if (cleanText.includes('Ïñµ')) {
            const eokIndex = cleanText.indexOf('Ïñµ');
            const eokValue = parseInt(cleanText.substring(0, eokIndex).replace(/[^0-9]/g, ''));
            price += eokValue * 100000000;
            
            if (cleanText.includes('Îßå')) {
                const manPart = cleanText.substring(eokIndex);
                const manValue = parseInt(manPart.replace(/[^0-9]/g, ''));
                price += manValue * 10000;
            }
        } else if (cleanText.includes('Îßå')) {
            const manValue = parseInt(cleanText.replace(/[^0-9]/g, ''));
            price = manValue * 10000;
        } else {
            price = parseInt(cleanText.replace(/[^0-9]/g, ''));
        }
        
        return price || 0;
    }

    /**
     * Î¶¨ÏÜåÏä§ Ï†ïÎ¶¨
     */
    async close() {
        try {
            if (this.browser) {
                await this.browser.close();
                console.log('üßπ Ïò®ÎπÑÎìú Ïä§ÌÅ¨ÎûòÌçº Î¶¨ÏÜåÏä§ Ï†ïÎ¶¨ ÏôÑÎ£å');
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Î¶¨ÏÜåÏä§ Ï†ïÎ¶¨ Ï§ë Ïò§Î•ò:', error.message);
        }
    }
}

module.exports = OnbidScraper;